{
  "$id": "https://github.com/Djaytan/helm-papermc-server",
  "$schema": "https://json-schema.org/draft-07/schema#",
  "title": "PaperMC-server Helm Chart Values Schema",
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "description": "Custom name for the server instance. If not set, the Helm release name will be used by default."
    },
    "namespace": {
      "type": "string",
      "description": "The Kubernetes namespace where the server will be deployed."
    },
    "eula": {
      "type": "boolean",
      "description": "You must set this to true to indicate acceptance of Minecraft's End User License Agreement (EULA). The server won't start unless this is accepted."
    },
    "container": {
      "type": "object",
      "description": "Configuration related to the server's container, like image and resource settings.",
      "properties": {
        "image": {
          "type": "string",
          "description": "OCI image to use for running the Minecraft server (e.g., 'djaytan/papermc-server:dev')."
        },
        "resources": {
          "type": "object",
          "description": "Kubernetes resource constraints for the container, used to control CPU, memory, and ephemeral storage usage. See: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-units-in-kubernetes.",
          "properties": {
            "requests": {
              "type": "object",
              "properties": {
                "ephemeralStorage": {
                  "type": "string",
                  "description": "Amount of ephemeral (temporary) storage requested (e.g., '10Gi'). See: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-units-in-kubernetes."
                },
                "cpu": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Minimum number of CPU units requested for the container."
                },
                "memory": {
                  "type": "string",
                  "description": "Minimum amount of memory requested (e.g., '8Gi'). See: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-units-in-kubernetes."
                }
              },
              "required": ["ephemeralStorage", "cpu", "memory"]
            },
            "limits": {
              "type": "object",
              "required": ["ephemeralStorage", "cpu", "memory"],
              "properties": {
                "ephemeralStorage": {
                  "type": "string",
                  "description": "Maximum amount of ephemeral (temporary) storage requested (e.g., '10Gi'). See: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-units-in-kubernetes."
                },
                "cpu": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Maximum number of CPU units the container can use."
                },
                "memory": {
                  "type": "string",
                  "description": "Maximum amount of memory requested (e.g., '8Gi'). See: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-units-in-kubernetes."
                }
              }
            }
          },
          "required": ["requests", "limits"]
        }
      },
      "required": ["image", "resources"]
    },
    "service": {
      "type": "object",
      "properties": {
        "ports": {
          "type": "object",
          "properties": {
            "nodePort": {
              "type": "integer",
              "minimum": 30000,
              "maximum": 32767,
              "description": "NodePort used to expose the Minecraft server to external clients. Must be within the Kubernetes NodePort range (30000â€“32767)."
            }
          },
          "required": ["nodePort"]
        }
      },
      "required": ["ports"]
    },
    "healthcheck": {
      "type": "object",
      "description": "Settings for monitoring server health and restarting it if it becomes unresponsive.",
      "properties": {
        "checkInterval": {
          "type": "integer",
          "minimum": 1,
          "description": "Interval in seconds between health checks. Shorter intervals detect problems faster but increase resource use."
        },
        "failureThreshold": {
          "type": "object",
          "properties": {
            "startup": {
              "type": "integer",
              "description": "Maximum number of seconds the server can remain unresponsive during startup before being considered unhealthy."
            },
            "liveness": {
              "type": "integer",
              "description": "Maximum number of seconds the server can be unresponsive during normal operation before it is restarted."
            }
          },
          "required": ["startup", "liveness"]
        }
      },
      "required": ["checkInterval", "failureThreshold"]
    }
  },
  "required": ["namespace", "eula", "container", "service", "healthcheck"]
}
