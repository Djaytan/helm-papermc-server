# Handle new changes by *eventually* releasing a new version based on commit messages.
# The project follows the conventional commits specs: https://www.conventionalcommits.org/en/v1.0.0/
# Releases are automatically determined thanks to semantic-release: https://github.com/semantic-release/semantic-release
name: Release - On Change

on:
  workflow_dispatch: {}
  push:
    branches: [ main, '+.x', beta, alpha ]

# https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#concurrency
concurrency:
  # Prevent concurrent releases on the same branch to avoid tag conflicts (e.g., "latest" on the main branch).
  # Concurrent releases on different branches are allowed, as their tags don't overlap.
  #
  # Note: GitHub's concurrency model cancels any *pending* job in the same group when a new one is queued.
  # This means that if multiple release requests are made in quick succession on the *same* branch,
  # only the latest one will proceed — which is acceptable, since it includes all previous changes.
  #
  # However, using the same concurrency group across *different* branches could result in a release
  # request for one branch canceling a pending release for another branch — which is *not* acceptable.
  #
  # Therefore, we scope concurrency to both the workflow and the branch.
  group: ${{ github.workflow }}-${{ github.ref }} # e.g. Release-main
  # Never cancel an ongoing release to prevent harmful interruptions
  cancel-in-progress: false

permissions: {}

jobs:
  perform:
    name: Perform
    runs-on: ubuntu-24.04
    timeout-minutes: 15

    permissions:
      contents: write # Required to publish a GitHub release
      issues: write # Required to comment on released issues
      pull-requests: write # Required to comment on released pull requests

    steps:
      # Firewall rules:
      # -> "*.github.com": Standard interactions with GitHub
      # -> "raw.githubusercontent.com": Retrieve license file when building OCI image
      # -> "*.docker.io" & "*.docker.com": Standard interactions with Docker
      # -> "*.alpinelinux.org": Standard interactions with Alpine Linux package repositories
      # -> "cdn.fwupd.org": Firmware updates (Alpine)
      # -> "api.papermc.io": Dynamic retrieval of the PaperMC server
      # -> "api.nuget.org" & "registry.npmjs.org": Downloading semantic-release CLI
      - name: Harden runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            github.com:443
            api.github.com:443
            raw.githubusercontent.com:443
            api.nuget.org:443
            registry.npmjs.org:443

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
          fetch-depth: 0 # Required by semantic-release

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: lts/jod
          cache: npm
          cache-dependency-path: .github/release/package-lock.json

      - name: Install semantic-release CLI
        working-directory: .github/release/
        run: npm clean-install --engine-strict

      - name: Release (on change)
        env:
          GITHUB_TOKEN: ${{ github.token }}
        working-directory: .github/release/
        run: npx --no-install semantic-release
